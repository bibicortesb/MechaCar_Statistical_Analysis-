install.packages("tidyverse")
install.packages("jsonlite")
2+2
source("~/.active-rstudio-document")
print(2+2)
# This is a comment
a = 10
print(a)
a <- 10
print(2+2)
# This is a comment
a = 10
print(a)
a <- 10 # This is what everyone uses in R <-  option + (-) for shortcut
b <- -3.1416
c <- 'This is a string'
d <-  'yet another string'
e <- TRUE
d <- FALSE
g <- T
h <- F
disney <- c('mickey', 'minnie', 'donald')
numbers <- c(1,3,6,11)
# R starts to write at one
disney[1]
# Vectors operations
numbers * 5
# For loops
for(x in disney) {
print(x)
}
print('Okay!')
print('Oh no!')
if(lenght(disney)>=3){
print('Okay!')
}else{
print('Oh no!')
}
if(lenght(disney)>=3){
print('Okay!')
}else{
print('Oh no!')
}
random_list <- list(
'charchters'=disney,
'numbers'= numbers,
'bools'= c(T,T,T,F,F),
'random'=3
)
random_list <- list(
'charachters'=disney,
'numbers'= numbers,
'bools'= c(T,T,T,F,F),
'random'=3
)
random_list['charachters']
random_list$charachters
typeof(random_list)
install.packages("dplyr")
library(dplyr)
precipitation <- c(3.9,2.9,4.1)
months <- c('Jan', 'Feb', 'Mar')
precipitation <- c(3.9,2.9,4.1)
names(precipitation) <- months
print(precipitation)
precipitation['Jan']
precipitation*5
# Equivalent .describe() from pandas...
my_summary <- summary(precipitation)
print(my_summary)
precipitation %>% summary() %>% print()
precipitation %>% lenghth() %>%  print()
precipitation %>% length() %>%  print()
precipitation %>%  sd() %>%  print()
df <- data.frame(
'month'=months,
'precipitation'=precipitation
)
```{r}
df <- data.frame(
'month'=months,
'precipitation'=precipitation
)
df <- data.frame(
'month'=months,
'precipitation'=precipitation
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
months <- c('Jan', 'Feb', 'Mar')
precipitation <- c(3.9,2.9,4.1)
names(precipitation) <- months
print(precipitation)
precipitation['Jan'] #This is how you access an item by its name
precipitation*5 # You can still do operations on the vector
# Equivalent .describe() from pandas...
my_summary <- summary(precipitation)
print(my_summary)
# Dplyr introduces the pipe %>% (cmd +shift+m), allows for function chainning...
# The pipe provides readable syntax
precipitation %>% summary() %>% print()
precipitation %>% length() %>%  print()
precipitation %>%  sd() %>%  print()
print(df)
print(cars)
print(df)
install.packages("tidyverse")
library(tidyverse)
data(diamonds)
library(tidyverse, package='ggplot')
diamonds
diamonds %>% head() %>% print()
diamonds %>% select(carat,price) %>% print()
diamonds %>%  filter(cut=='Ideal) %>% head() %>% print()
diamonds %>%  filter(cut=='Ideal') %>% head() %>% print()
diamonds %>%  filter(cu t=='Ideal') %>% head() %>% print()
diamonds %>% filter(cut=='Ideal') %>% head() %>% print()
diamonds %>% group_by(color) %>%  summarise(avg_price=mean(price)) %>% print()
library(dplyr)
setwd("~/Documents/Data_bootcamp/Data_Challenges/MechaCar_Statistical_Analysis-")
MechaCar_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
?lm()
lm(mpg_model ~ MechaCar_table, vehicle_lenght )
lm(mpg_model ~ MechaCar_table, 'vehicle_lenght' )
lm(mpg ~ vehicle_lenght, data=MachaCar_table)
lm(mpg ~ vehicle_lenght, data=MechaCar_table)
diamonds.lm <- lm(formula = mpg ~ vehicle_lenght + vehicle_weight + spoiler_angle + ground_clearance +AWD,
data = diamonds)
diamonds.lm <- lm(formula = mpg ~ vehicle_lenght + vehicle_weight + spoiler_angle + ground_clearance +AWD,
data = MechaCar_table)
diamonds.lm <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance +AWD,
data = MechaCar_table)
mpg.lm <- lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance +AWD,
data = MechaCar_table)
summary(mpg.lm)
SuspensionCoil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
SuspensionCoil_table.summarize()
total_summary <- SuspensionCoil_table %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),Variance_PSI=var(PSI),standardeviation=sd(PSI))
7.89*7.89
View(total_summary)
lot_summary <- SuspensionCoil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_lot=mean(Manufacturing_Lot),Median_lot=median(Manufacturing_Lot),Variance=var(Manufacturing_Lot), std_lot=sd(Manufacturing_Lot), .groups = 'keep') #create summary table with multiple columns
use warnings()
lot_summary <- SuspensionCoil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_lot=mean(PSI),Median_lot=median(PSI),Variance=var(PSI), std_lot=sd(PSI), .groups = 'keep') #create summary table with multiple columns
View(lot_summary)
# t.test
?t.test()
View(lot_summary)
View(total_summary)
t.test((total_summary$Mean_PSI),mu=1500),paired = T) #compare sample versus population means
t.test((total_summary$Mean_PSI),mu=1500)) #compare sample versus population means
t.test(total_summary$Mean_PSI),mu=1500) #compare sample versus population means
t.test(total_summary$Mean_PSI,mu=1500) #compare sample versus population means
t.test(total_summary$Mean_PSI, mu=1500) #compare sample versus population means
t.test(total_summary$Mean_PSI, mu=1500) #compare sample versus population means
t.test(total_summary$Mean_PSI, mu=-1500)
t.test(total_summary$Mean_PSI, mu=0)
t.test(total_summary$Mean_PSI, mu=1500)
t.test(SuspensionCoil_table$PSI, mu=1500)
lot1 <- subset(SuspensionCoil_table, lot == "Lot1")$PSI
lot1 <- subset(SuspensionCoil_table, Manufacturing_Lot == "Lot1")
lot2 <- subset(SuspensionCoil_table, Manufacturing_Lot == "Lot2")
lot2 <- subset(SuspensionCoil_table, Manufacturing_Lot == "Lot2")
# each subste
t.test(lot1$PSI, mu=1500)
t.test(lot2$PSI, mu=1500)
t.test(lot2$PSI, mu=1500)
